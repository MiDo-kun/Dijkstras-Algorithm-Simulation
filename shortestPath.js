// Todo's:
// Create a template for the nodes
// Create a Adjacency Matrix with it
// Create user options, 
    // - Allow user to input the source node,
    // - Allow user to input the end node,
// Draw the graph in the canvas and perform specific animation
// Mobile responsiveness 
// Allow the page to be available in the internet

// Width - 1000, Height - 600
const vertices = [
  [ "N0", "500", "300" ],
  [ "N1", "400", "200" ],
  [ "N2", "100", "150" ],
  [ "N3", "230", "300" ],
  [ "N4", "50", "400" ],
  [ "N5", "400", "400" ],
  [ "N6", "600", "100" ],
  [ "N7", "300", "70" ],
  [ "N8", "170", "520" ],
  [ "N9", "350", "550" ],
  [ "N10", "540", "530" ],
  [ "N11", "900", "70" ],
  [ "N12", "800", "170" ],
  [ "N13", "670", "270" ],
  [ "N14", "670", "430" ],
  [ "N15", "920", "500" ],
  [ "N16", "770", "530" ],
  [ "N17", "880", "330" ],
]
// [0,141.42,0, 0, 0, 141.42, 0, 0, 0, 0, 0, 461.41,326.96,172.63,214.01,465.19,354.68,381.18],
// [141.42,0,304.14,197.23,403.11,200.00,223.61,164.01,394.08,353.55,358.47,516.62,401.12,278.93,354.68,600.33,495.78,497.29],
// [427.20,304.14,0,198.49,254.95,390.51,502.49,215.41,376.56,471.70,581.38,803.99,700.29,582.49,635.06,891.57,770.26,800.50],
// [270.00,197.23,198.49,0,205.91,197.23,420.59,240.42,228.04,277.31,386.01,708.38,584.64,441.02,458.80,718.40,586.94,650.69],
// [460.98,403.11,254.95,205.91,0,350.00,626.50,414.00,169.71,335.41,506.95,911.81,784.47,633.48,620.73,875.73,731.64,832.95],
// [141.42,200.00,390.51,197.23,350.00,0,360.56,344.82,259.42,158.11,191.05,599.08,461.41,299.67,271.66,529.53,392.17,485.08],
// [223.61,223.61,502.49,420.59,626.50,360.56,0,301.50,601.08,514.78,434.17,301.50,211.90,183.85,337.34,512.25,462.39,362.35],
// [304.80,164.01,215.41,240.42,414.00,344.82,301.50,0,468.40,482.60,518.84,600.00,509.90,420.59,516.24,754.52,657.65,635.61],
// [396.61,394.08,376.56,228.04,169.71,259.42,601.08,468.40,0,182.48,370.14,857.55,720.69,559.02,508.04,750.27,600.08,734.98],
// [291.55,353.55,471.70,277.31,335.41,158.11,514.78,482.60,182.48,0,191.05,730.00,588.98,425.21,341.76,572.19,420.48,573.85],
// [233.45,358.47,581.38,386.01,506.95,191.05,434.17,518.84,370.14,191.05,0,584.12,444.07,290.69,164.01,381.18,230.00,394.46],
// [461.41,516.62,803.99,708.38,911.81,599.08,301.50,600.00,857.55,730.00,584.12,0,141.42,304.80,427.20,430.46,478.02,260.77],
// [326.96,401.12,700.29,584.64,784.47,461.41,211.90,509.90,720.69,588.98,444.07,141.42,0,164.01,290.69,351.14,361.25,178.89],
// [172.63,278.93,582.49,441.02,633.48,299.67,183.85,420.59,559.02,425.21,290.69,304.80,164.01,0,160.00,339.71,278.57,218.40],
// [214.01,354.68,635.06,458.80,620.73,271.66,337.34,516.24,508.04,341.76,164.01,427.20,290.69,160.00,0,259.62,141.42,232.59],
// [465.19,600.33,891.57,718.40,875.73,529.53,512.25,754.52,750.27,572.19,381.18,430.46,351.14,339.71,259.62,0,152.97,174.64],
// [354.68,495.78,770.26,586.94,731.64,392.17,462.39,657.65,600.08,420.48,230.00,478.02,361.25,278.57,141.42,152.97,0,228.25],
// [381.18,497.29,800.50,650.69,832.95,485.08,362.35,635.61,734.98,573.85,394.46,260.77,178.89,218.40,232.59,174.64,228.25,0],
 
// let rows = 5
// const adjacencyMatrix = [
//   [0,141.42,0, 0, 0, 141.42, 0, 0, 0, 0, 0, 0,0,172.63,0,0,0,0],
//   [141.42,0,0,197.23,0,0,223.61,164.01,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,215.41,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,205.91,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
//   [0,0,0,0,0,0,0,0,259.42,158.11,191.05,0,0,0,0,0,0,0,0],
//   [223.61,223.61,502.49,420.59,626.50,360.56,0,301.50,601.08,514.78,434.17,301.50,211.90,183.85,337.34,512.25,462.39,362.35],
//   [304.80,164.01,215.41,240.42,414.00,344.82,301.50,0,468.40,482.60,518.84,600.00,509.90,420.59,516.24,754.52,657.65,635.61],
//   [396.61,394.08,376.56,228.04,169.71,259.42,601.08,468.40,0,182.48,370.14,857.55,720.69,559.02,508.04,750.27,600.08,734.98],
//   [291.55,353.55,471.70,277.31,335.41,158.11,514.78,482.60,182.48,0,191.05,730.00,588.98,425.21,341.76,572.19,420.48,573.85],
//   [233.45,358.47,581.38,386.01,506.95,191.05,434.17,518.84,370.14,191.05,0,584.12,444.07,290.69,164.01,381.18,230.00,394.46],
//   [461.41,516.62,803.99,708.38,911.81,599.08,301.50,600.00,857.55,730.00,584.12,0,141.42,304.80,427.20,430.46,478.02,260.77],
//   [326.96,401.12,700.29,584.64,784.47,461.41,211.90,509.90,720.69,588.98,444.07,141.42,0,164.01,290.69,351.14,361.25,178.89],
//   [172.63,278.93,582.49,441.02,633.48,299.67,183.85,420.59,559.02,425.21,290.69,304.80,164.01,0,160.00,339.71,278.57,218.40],
//   [214.01,354.68,635.06,458.80,620.73,271.66,337.34,516.24,508.04,341.76,164.01,427.20,290.69,160.00,0,259.62,141.42,232.59],
//   [465.19,600.33,891.57,718.40,875.73,529.53,512.25,754.52,750.27,572.19,381.18,430.46,351.14,339.71,259.62,0,152.97,174.64],
//   [354.68,495.78,770.26,586.94,731.64,392.17,462.39,657.65,600.08,420.48,230.00,478.02,361.25,278.57,141.42,152.97,0,228.25],
//   [381.18,497.29,800.50,650.69,832.95,485.08,362.35,635.61,734.98,573.85,394.46,260.77,178.89,218.40,232.59,174.64,228.25,0],
// ]
//
function setup() {
  createCanvas(1000, 600);
  background("#1e1e1e");
}

function draw() {
  for (let rows = 0; rows < vertices.length; rows++) {
    const n = vertices[rows][0];
    const x = vertices[rows][1];
    const y = vertices[rows][2]; 
    drawNode(n, x, y);
  } 
  
  noLoop();
 
  // for (let cols = 0; cols < adjacencyMatrix.length; cols++) {
  //   console.log(adjacencyMatrix[rows][cols])
  //   if (adjacencyMatrix[rows][cols] != 0) {
  //     const x1 = vertices[rows][1]
  //     const y1 = vertices[rows][2]
  //     const x2 = vertices[cols][1];
  //     const y2 = vertices[cols][2];
  //     drawLine(x1, y1, x2, y2);  
  //   }
  // }
  
const adjacencyMatrix = [
// 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],// 0
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 1
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 2
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 3
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 4
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 5
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 6
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 7
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 8
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 9
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 10
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 11
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 12
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 13
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 14
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 15
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 16
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],// 17
]  
  let interval = 1;
  for (let rows = 0; rows < adjacencyMatrix.length; rows++) {
    for (let cols = 0; cols < adjacencyMatrix.length; cols++) {
      if (adjacencyMatrix[rows][cols] == 1) {
        const x1 = vertices[rows][1]
        const y1 = vertices[rows][2]
        const x2 = vertices[cols][1];
        const y2 = vertices[cols][2];
        console.log("x1: " + x1)
        console.log("y1: " + y1)
        console.log("x2: " + x2)
        console.log("y2: " + y2)
        drawLine(x1, y1, x2, y2, 'white', interval++);  
      }  
    }
  }
}

function drawLine(x1, y1, x2, y2, color, interval) {
  setTimeout(() => {
    let angle = 0;
    const animate = setInterval(() => {
      let tempX = map(angle, 0, 100, x1, x2, 1);
      let tempY = map(angle, 0, 100, y1, y2, 1);
      stroke(color);  
      strokeWeight(2);

      angle += 0.1;
      if (tempX == x2 && tempY == y2)
        clearInterval(animate);

      line(x1, y1, tempX, tempY);
    }, 0.2);
  }, 1000 * interval)
}

function drawNode(n, x, y) {
  circle(x, y, 50)
  textAlign(CENTER, CENTER)
  textStyle(BOLD)
  textSize(15)
  text(n, x, y)
}

function animateLine(x1, y1, x2, y2, text1, text2, interval, color) {
  let vertices = graph.vertices;
  setTimeout(() => {
    let angle = 0;
    const animate = setInterval(() => {
      let tempX = map(angle, 0, 100, x1, x2, 1);
      let tempY = map(angle, 0, 100, y1, y2, 1);
      stroke(color);  
      strokeWeight(2);

      angle += 0.3;
      if (tempX == x2 && tempY == y2)
        clearInterval(animate);

      line(x1, y1, tempX, tempY);

      strokeWeight(1);
      circle(x1, y1, 50)
      circle(x2, y2, 50)

      text(vertices[text1][0], vertices[text1][1], vertices[text1][2])
      text(vertices[text2][0], vertices[text2][1], vertices[text2][2])
      textStyle(BOLD)
    }, 0.2);
  }, 1000 * interval)
}

function dijsktra(vertices, graph) { 
  const V = vertices.length;
  let dist = new Array(V);
  let sptSet = new Array(V);

  for(let i = 0; i < V; i++) {
    dist[i] = Number.MAX_VALUE;
    sptSet[i] = false;
  }

  dist[0] = 0;
  let interval = 0; // Doesn't do with the algorithm, for animating the line only.
  for(let count = 0; count < V - 1; count++) {
    let min = Number.MAX_VALUE;
    let min_index = -1;

    for(let v = 0; v < V; v++) {
      if (sptSet[v] == false && dist[v] <= min) {
        min = dist[v];
        min_index = v;
      }
    }

    sptSet[min_index] = true;
    for(let v = 0; v < V; v++) {
      if (!sptSet[v] && graph[min_index][v] != 0 && dist[min_index] != Number.MAX_VALUE && dist[min_index] + graph[min_index][v] < dist[v]) {
        animateLine(vertices[count][1], vertices[count][2], vertices[v][1], vertices[v][2], count, v, ++interval - .50, 'white');
        dist[v] = dist[min_index] + graph[min_index][v];
        animateLine(vertices[min_index][1], vertices[min_index][2], vertices[v][1], vertices[v][2], min_index, v, ++interval * V, 'red')  
      }
    }
  }
}
